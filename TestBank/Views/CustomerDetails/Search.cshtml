
@model TestBank.Models.CustomerDetail

@{
    ViewBag.Title = "Search";

}

@using (Html.BeginForm("Search", "CustomerDetails", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <h3 style="padding:0.5% 30%">CUSTOMER INFORMATION</h3>
    <hr />

    <form asp-action="Search">
        <div class="form-horizontal">
            <div class="form-group ">
                <label for="id" class="control-label col-md-2">Customer ID</label>
                <div class="col-md-2">
                    <input name="id"  class="form-control" />
                </div>
                <div class="col-md-2">
                    <input type="submit" value="Search"  class="btn btn-default" />
                   

                </div>
            </div>
        </div>
    </form>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()


    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.CustID)

        <div class="row">
            <div class="col-xs-3 col-xs-offset-0">
                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-xs-8 col-xs-offset-1">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-xs-3 col-xs-offset-0">
                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-xs-8 col-xs-offset-1">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-xs-3 col-xs-offset-0">
                <div class="form-group">
                    @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-xs-8 col-xs-offset-2">
                        @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 ">
                    &emsp;&emsp;&emsp;&emsp;&emsp;&emsp; |   <button type="button" style="padding:2% 11% 2% 5%" class="btn btn-default" onclick="location.href = '@Url.Action("Create", "CustomerDetails")'">ADD</button> |
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-3 col-xs-offset-0">
                <div class="form-group">
                    @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-xs-8 col-xs-offset-1">
                        @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-xs-3 col-xs-offset-0">
                <div class="form-group">
                    @Html.LabelFor(model => model.EmailId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-xs-8 col-xs-offset-1">
                        @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-xs-3 col-xs-offset-0">
                <div class="form-group">
                    @Html.LabelFor(model => model.MaritalStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-xs-8 col-xs-offset-2">
                        @Html.EditorFor(model => model.MaritalStatus, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.MaritalStatus, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 ">
              &emsp; &emsp; &emsp; &emsp; &emsp; &emsp;   <button type = "button"  class="btn btn-default "   onclick = " location.href = '@Url.Action("Edit", "CustomerDetails", new { id = ViewBag.id })' ">UPDATE</button>   
                </div>
            </div>


        </div>


        <div class="row">
            <div class="col-xs-3 col-xs-offset-0">
                <div class="form-group">
                    @Html.LabelFor(model => model.Address1, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-xs-8 col-xs-offset-1">
                        @Html.EditorFor(model => model.Address1, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-xs-3 col-xs-offset-0">
                <div class="form-group">
                    @Html.LabelFor(model => model.Address2, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-xs-8 col-xs-offset-1">
                        @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-xs-3 col-xs-offset-0">
                <div class="form-group">
                    @Html.LabelFor(model => model.ZIPCode, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-xs-8 col-xs-offset-2">
                        @Html.EditorFor(model => model.ZIPCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.ZIPCode, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 ">
                    &emsp;&emsp;&emsp;&emsp;&emsp;&emsp; |  <button type="button" class="btn btn-default" onclick="location.href = '@Url.Action("Delete", "CustomerDetails", new { id = ViewBag.id })'">DELETE</button>   |
                </div>
            </div>
        </div>


        <div class="row">
            <div class="col-xs-3 col-xs-offset-0">
                <div class="form-group">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-xs-8 col-xs-offset-1">
                        @Html.EditorFor(model => model.City1.CityName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-xs-3 col-xs-offset-0">
                <div class="form-group">
                    @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-xs-8 col-xs-offset-1">
                        @Html.EditorFor(model => model.State1.StateName, new { htmlAttributes = new { @class = "form-control" , @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-xs-3 col-xs-offset-0">
                <div class="form-group">
                    @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-xs-8 col-xs-offset-2">
                        @Html.EditorFor(model => model.Country1.CountryName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>








    </div>






}
<button type="button" class="btn btn-default" onclick="location.href = '@Url.Action("Create","CustomerAccounts",new { id = ViewBag.id})'">ADD ACCOUNT</button>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script>
    $(document).ready(function () {
        $("#CountryCode").change(function () {
            var countryid = $(this).val();
            debugger
            $.ajax({
                type: "post",
                url: "/CustomerDetails/GetStateList?CountryCode=" + countryid,
                contentType: "html",
                success: function (response) {
                    debugger
                    $("#StateCode").empty();
                    $("#StateCode").append(response);
                }
            })
        })
    })
</script>
